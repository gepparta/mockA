<?xml version="1.0" encoding="utf-8"?>
<CLAS CLSNAME="ZCL_MOCKA_MOCKER_ATTRIBUTE" VERSION="1" LANGU="E" DESCRIPT="implements a mocked attribute" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 ">
 <implementing CLSNAME="ZCL_MOCKA_MOCKER_ATTRIBUTE" REFCLSNAME="ZIF_MOCKA_MOCKER_ATTRIBUTE" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1" EDITORDER="0 "/>
 <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
 <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
 <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
 <typeUsage CLSNAME="ZCL_MOCKA_MOCKER_ATTRIBUTE" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" EXPLICIT="X" IMPLICIT="X"/>
 <typeUsage CLSNAME="ZCL_MOCKA_MOCKER_ATTRIBUTE" TYPEGROUP="SEOS" VERSION="1" TPUTYPE="0" EXPLICIT="X"/>
 <forwardDeclaration>ABAP</forwardDeclaration>
 <forwardDeclaration>SEOS</forwardDeclaration>
 <attribute CLSNAME="ZCL_MOCKA_MOCKER_ATTRIBUTE" CMPNAME="MO_MOCKER" VERSION="1" LANGU="E" DESCRIPT="describes a creator of mock objects" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="ZIF_MOCKA_MOCKER" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZCL_MOCKA_MOCKER_ATTRIBUTE" CMPNAME="MR_VALUE" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="DATA" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZCL_MOCKA_MOCKER_ATTRIBUTE" CMPNAME="MV_ATTRIBUTE" VERSION="1" LANGU="E" DESCRIPT="Full Component Name" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SEOCPDNAME" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <attribute CLSNAME="ZCL_MOCKA_MOCKER_ATTRIBUTE" CMPNAME="MV_IS_SPECIFIED" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="4 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="ABAP_BOOL" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
 <interfaceMethod CLSNAME="ZCL_MOCKA_MOCKER_ATTRIBUTE" CPDNAME="ZIF_MOCKA_MOCKER_ATTRIBUTE~IS_VALUE_SPECIFIED">
  <source>METHOD zif_mocka_mocker_attribute~is_value_specified.
  rv_is_value_specified = mv_is_specified.
ENDMETHOD.</source>
 </interfaceMethod>
 <interfaceMethod CLSNAME="ZCL_MOCKA_MOCKER_ATTRIBUTE" CPDNAME="ZIF_MOCKA_MOCKER_ATTRIBUTE~RETURN">
  <source>METHOD zif_mocka_mocker_attribute~return.
  r_result = mr_value.
ENDMETHOD.</source>
 </interfaceMethod>
 <interfaceMethod CLSNAME="ZCL_MOCKA_MOCKER_ATTRIBUTE" CPDNAME="ZIF_MOCKA_MOCKER_ATTRIBUTE~RETURNS">
  <source>METHOD zif_mocka_mocker_attribute~returns.
  DATA lr_value TYPE REF TO data.
  GET REFERENCE OF i_return INTO lr_value.
  mr_value = copy_value( lr_value ).
  mv_is_specified = abap_true.
  ro_mocker = mo_mocker.
ENDMETHOD.</source>
 </interfaceMethod>
 <method CLSNAME="ZCL_MOCKA_MOCKER_ATTRIBUTE" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZCL_MOCKA_MOCKER_ATTRIBUTE" CMPNAME="CONSTRUCTOR" SCONAME="IV_ATTRIBUTE" VERSION="1" LANGU="E" DESCRIPT="Full Component Name" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SEOCPDNAME"/>
  <parameter CLSNAME="ZCL_MOCKA_MOCKER_ATTRIBUTE" CMPNAME="CONSTRUCTOR" SCONAME="IO_MOCKER" VERSION="1" LANGU="E" DESCRIPT="describes a creator of mock objects" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="ZIF_MOCKA_MOCKER"/>
  <source>METHOD constructor.
  mv_attribute = iv_attribute.
  mo_mocker = io_mocker.
ENDMETHOD.</source>
 </method>
 <method CLSNAME="ZCL_MOCKA_MOCKER_ATTRIBUTE" CMPNAME="COPY_VALUE" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
  <parameter CLSNAME="ZCL_MOCKA_MOCKER_ATTRIBUTE" CMPNAME="COPY_VALUE" SCONAME="IR_REF" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="3" TYPE="DATA"/>
  <parameter CLSNAME="ZCL_MOCKA_MOCKER_ATTRIBUTE" CMPNAME="COPY_VALUE" SCONAME="RR_REF" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="3" TYPE="DATA"/>
  <source>METHOD COPY_VALUE.
  FIELD-SYMBOLS &lt;lv_in&gt; TYPE any.
  FIELD-SYMBOLS &lt;lv_out&gt; TYPE any.

  ASSIGN ir_ref-&gt;* TO &lt;lv_in&gt;.
  CREATE DATA rr_ref LIKE &lt;lv_in&gt;.
  ASSIGN rr_ref-&gt;* TO &lt;lv_out&gt;.
  &lt;lv_out&gt; = &lt;lv_in&gt;.
ENDMETHOD.</source>
 </method>
</CLAS>
